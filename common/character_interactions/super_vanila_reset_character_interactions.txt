ransom_interaction = {
	interface_priority = 50
	common_interaction = yes
	use_diplomatic_range = no
	category = interaction_category_prison
	special_interaction = ransom_interaction
	icon = icon_gold
	redirect = {
		scope:recipient = {
			save_scope_as = secondary_recipient
			if = {
				limit = {
					is_ruler = no
					exists = liege
				}
				liege = {
					save_scope_as = recipient
				}
			}
		}
	}

	desc = ransom_interaction_desc

	notification_text = {
		first_valid = {
			triggered_desc = {
				trigger = {
					scope:secondary_recipient = scope:recipient
				}
				desc = OFFER_RANSOM_PROPOSAL_PERSONAL
			}
			desc = OFFER_RANSOM_PROPOSAL
		}
	}
	
	is_shown = {     #修改在此处  主要是为了ai在获取魔性和成为暗影之神时候不缺少囚犯设置，禁止ai在一定条件下卖掉自己的囚犯
		trigger_if = {    #修改类型，添加条件，从此开始
			limit = {
				is_ai = yes
			}
			trigger_if = {
				limit = {
					AND = {
						has_perk = devilishness
						NOT = {
							has_trait = devilishness
						}
					}
				}
				always = no
			}
			trigger_else_if = {
				limit = {
					is_star_power_god = no
					has_trait = devilishness
					not_is_anyone_dark_god = yes					
				}
				always = no
			}
			trigger_else = {
				scope:secondary_recipient = {
					#exists = liege
					is_imprisoned_by = scope:actor
				}
				NOT = {
					scope:actor = scope:recipient
				}
			}
		}
		trigger_else = {
			scope:secondary_recipient = {      #原版仅有以下内容
				#exists = liege
				is_imprisoned_by = scope:actor
			}
			NOT = {
				scope:actor = scope:recipient	#原版至此结束
			}
		}										#添加修改 至此结束
	}

	is_valid_showing_failures_only = {
		trigger_if = {
			limit = {
				scope:invalid = yes
			}
			always = no
		}

		scope:recipient = { is_busy_in_events_localised = yes } #Payer
		scope:secondary_recipient = { is_busy_in_events_localised = yes } #Prisoner
		scope:secondary_recipient = {
			custom_description = {
				text = "currently_being_tortured"
				NOT = { has_character_flag = is_being_tortured }
			}
		}
		cannot_release_former_regent_whilst_old_regent_holds_power_trigger = {
			PRISONER = scope:recipient
			REGENT = scope:recipient.var:imprisoned_by_diarch
		}
	}
	
	on_accept = {
		if = {
			limit = { scope:recipient = { has_character_modifier = allowed_to_go_outside } }
			scope:recipient = { remove_character_modifier = allowed_to_go_outside }
		}
		if = {
			limit = { scope:recipient = { has_character_modifier = moldy_gruel_diet } }
			scope:recipient = { remove_character_modifier = moldy_gruel_diet }
		}
		# Set up event scopes and trigger the exchange.
		if = {
			limit = { scope:secondary_recipient = { is_imprisoned_by = scope:actor } } # To prevent simultaneous release-shenanigans
			scope:secondary_recipient = {
				save_scope_as = prisoner
			}
			scope:recipient = {
				save_scope_as = payer

				# If the recipient doesn't have enough funds to pay the full amount and we're only requesting their current funds, save how much they've agreed to pay.
				if = {
					limit = {
						OR = {
							exists = scope:current_gold
							exists = scope:extortionate_current_gold
						}
					}
					save_scope_value_as = {
						name = ransom_saved_gold_value
						value = scope:payer.current_gold_value
					}
				}
			}
			scope:actor = {
				save_scope_as = imprisoner

				#Save scopes for portraits
				scope:recipient = { save_scope_as = portrait_first }
				if = {
					limit = {
						NOT = { scope:portrait_first = scope:prisoner }
					}
					scope:prisoner = { save_scope_as = portrait_second}
					# Must come after we save the payment value, or the payer won't know how much they need to pay.
					send_interface_message = {
						type = event_prison_good
						title = msg_ransom_prisoner
						right_icon = scope:portrait_first
						left_icon = scope:portrait_second
						ransom_interaction_effect = yes
					}
				}
				else = {
					# Must come after we save the payment value, or the payer won't know how much they need to pay.
					send_interface_message = {
						type = event_prison_good
						title = msg_ransom_prisoner
						right_icon = scope:portrait_first
						ransom_interaction_effect = yes
					}
				}

				

				# Struggle Catalyst
				if = {
					limit = {
						any_character_struggle = {
							involvement = involved
							activate_struggle_catalyst_secondary_character_involvement_involved_trigger = {
								CATALYST = catalyst_ransom_important
								CHAR = scope:secondary_recipient
							}
						}
					}
					every_character_struggle = {
						involvement = involved
						limit = {
							activate_struggle_catalyst_secondary_character_involvement_involved_trigger = {
								CATALYST = catalyst_ransom_important
								CHAR = scope:secondary_recipient
							}
						}
						activate_struggle_catalyst = {
							catalyst = catalyst_ransom_important
							character = scope:actor
						}
					}
				}
			}
		}
	}

	on_decline = {
		# If a player declines this ransom offer, wait 10 years before sending another one (they presumably will ransom that character themselves when they want them back).
		if = {
			limit = { scope:recipient = { is_ai = no } }
			scope:secondary_recipient = {
				add_character_flag = {
					flag = character_ransom_refused_by_player
					years = 10
				}
			}
		}		

		# Trigger notification event
		scope:actor = {
			trigger_event = char_interaction.0131
		}
	}
	
	# Pay me an extortionate amount!
	send_option = {
		is_shown = {
			scope:actor = {
				exists = dynasty
				dynasty = {
					has_dynasty_perk = fp1_pillage_legacy_3
				}
			}
			scope:recipient ?= {
				gold >= scope:secondary_recipient.increased_ransom_cost_value
			}
		}
		flag = extortionate_gold
		localization = "RANSOM_EXTORTIONATE_GOLD_OPTION"
	}

	# If you don't have what they're worth, pay me what you have (extort version)!
	send_option = {
		is_shown = {
			scope:actor = {
				exists = dynasty
				dynasty = {
					has_dynasty_perk = fp1_pillage_legacy_3
				}
			}
			scope:recipient ?= {
				gold < scope:secondary_recipient.increased_ransom_cost_value
				gold >= 1
			}
		}
		flag = extortionate_current_gold
		localization = "RANSOM_EXTORTIONATE_CURRENT_GOLD_OPTION"
	}
	
	# Pay me what they're worth!
	send_option = {
		is_shown = {
			scope:actor = {
				OR = {
					is_lowborn = yes
					NOT = {
						dynasty = {
							has_dynasty_perk = fp1_pillage_legacy_3
						}
					}
				}
			}
			scope:recipient ?= {
				gold >= scope:secondary_recipient.ransom_cost_value
			}
		}
		flag = gold
		localization = "RANSOM_GOLD_OPTION"
	}

	# If you don't have what they're worth, pay me what you have!
	send_option = {
		is_shown = {
			scope:actor = {
				OR = {
					is_lowborn = yes
					NOT = {
						dynasty = {
							has_dynasty_perk = fp1_pillage_legacy_3
						}
					}
				}
			}
			scope:recipient ?= {
				gold < scope:secondary_recipient.ransom_cost_value
				gold >= 1
			}
		}
		flag = current_gold
		localization = "RANSOM_CURRENT_GOLD_OPTION"
	}
	
	send_option = {
		is_shown = {
			trigger_if = { # in the mass action ransom we only want to do it for gold
				limit = { exists = scope:mass_action }
				scope:mass_action = no
			}
		}
		is_valid = {
			scope:actor = {
				can_add_hook = { #To match the hook added through ransom_interaction_effect
					target = scope:recipient
					type = favor_hook
				}
			}
		}
		flag = favor
		localization = "RANSOM_FAVOR_OPTION"
	}
	
	localization_values = {
		EXTORTIONATE_RANSOM_COST = scope:secondary_recipient.increased_ransom_cost_value
		RANSOM_COST = scope:secondary_recipient.ransom_cost_value
		CURRENT_GOLD = scope:recipient.gold
	}
	
	ai_accept = {
		base = 0
		modifier = { # Greedy characters can have their greed get the better of them...
			add = { 
				value = scope:recipient.ai_greed
				multiply = -0.5 
			}
			scope:recipient.ai_greed >= medium_positive_ai_value
			OR = {
				scope:gold = yes
				scope:extortionate_gold = yes
			}
			NOT = {
				scope:recipient = scope:secondary_recipient
			}		
			desc = AI_VALUE_MODIFIER_GREED
		}
		modifier = { # Generous characters are more willing to pay
			add = { 
				value = scope:recipient.ai_greed
				multiply = -0.10 
			}
			OR = {
				scope:gold = yes
				scope:extortionate_gold = yes
			}
			NOT = {
				scope:recipient = scope:secondary_recipient
			}
			scope:recipient.ai_greed <= medium_negative_ai_value 
			desc = AI_VALUE_MODIFIER_GENEROUS
		}
		modifier = {
			add = -10
			NOT = { scope:recipient = scope:secondary_recipient }
			scope:recipient = {
				NOR = {
					is_spouse_of = scope:secondary_recipient
					is_close_or_extended_family_of = scope:secondary_recipient
					has_relation_lover = scope:secondary_recipient
					has_relation_friend = scope:secondary_recipient
					has_secret_relation_lover = scope:secondary_recipient
					has_relation_soulmate = scope:secondary_recipient
					has_relation_best_friend = scope:secondary_recipient
					is_parent_of = scope:secondary_recipient
				}
			}
			desc = "UNIMPORTANT_CHAR_REASON"
		}
		modifier = {
			add = 100
			scope:recipient = scope:secondary_recipient
			desc = "WANTS_FREEDOM_REASON"
		}
		modifier = { # Acceptance boon for lovers, friends, etc
			add = 25
			NOT = { scope:recipient = scope:secondary_recipient }
			scope:recipient = {
				OR = {
					is_spouse_of = scope:secondary_recipient
					is_close_or_extended_family_of = scope:secondary_recipient
					has_relation_lover = scope:secondary_recipient
					has_relation_friend = scope:secondary_recipient
					has_secret_relation_lover = scope:secondary_recipient
				}
				NOR = {
					has_relation_soulmate = scope:secondary_recipient
					has_relation_best_friend = scope:secondary_recipient
					is_parent_of = scope:secondary_recipient
				}
			}
			desc = "DEAR_TO_ME_REASON"
		}
		modifier = { # Massive acceptance boon for Soulmates and Best Friends
			add = 200
			scope:recipient = {
				OR = {
					has_relation_soulmate = scope:secondary_recipient
					has_relation_best_friend = scope:secondary_recipient
					is_parent_of = scope:secondary_recipient
				}
				NOR = {
					is_spouse_of = scope:secondary_recipient
					AND = {
						NOT = {
							is_parent_of = scope:secondary_recipient
						}
						is_close_or_extended_family_of = scope:secondary_recipient
					}
					has_relation_lover = scope:secondary_recipient
					has_relation_friend = scope:secondary_recipient
					has_secret_relation_lover = scope:secondary_recipient
				}
			}
			desc = "DEAR_TO_ME_REASON"
		}
		modifier = { # Say no to rivals
			add = -200
			scope:recipient = {
				has_relation_rival = scope:secondary_recipient
			}
			desc = "RIVAL_TO_ME_REASON"
		}
		modifier = { # Say no to rivals
			add = -500
			scope:recipient = {
				has_relation_nemesis = scope:secondary_recipient
			}
			desc = "NEMESIS_TO_ME_REASON"
		}
		modifier = {
			add = 10
			scope:recipient = {
				NOR = {
					this = scope:secondary_recipient
					is_spouse_of = scope:secondary_recipient
					is_close_or_extended_family_of = scope:secondary_recipient
					has_relation_lover = scope:secondary_recipient
					has_relation_soulmate = scope:secondary_recipient
					has_secret_relation_lover = scope:secondary_recipient
				}
				NOR = {
					has_relation_rival = scope:secondary_recipient
					has_relation_nemesis = scope:secondary_recipient
				}
			}
			scope:recipient.dynasty = scope:secondary_recipient.dynasty
			desc = "MY_DYNASTY_REASON"
		}
		modifier = { # An Intimidated recipient is significantly more likely to accept an offer from the liege
			add = intimidated_reason_value
			trigger = {
				scope:recipient = {
					target_is_liege_or_above = scope:actor
					has_dread_level_towards = {
						target = scope:actor
						level = 1
					}
				}
			}
			desc = INTIMIDATED_REASON
		}

		modifier = { # An Cowed recipient is significantly more likely to accept an offer from the liege
			add = cowed_reason_value
			trigger = {
				scope:recipient = {
					target_is_liege_or_above = scope:actor
					has_dread_level_towards = {
						target = scope:actor
						level = 2
					}
				}
			}
			desc = COWED_REASON
		}
	}
	
	# AI
	ai_targets = {
		ai_recipients = prisoners
	}
	ai_frequency = 6

	ai_potential = {
		always = yes
	}

	ai_will_do = {
		base = 0
		
		modifier = {
			add = 100
			OR = {
				OR = {
					scope:gold = yes
					scope:extortionate_gold = yes
				}
				AND = {
					scope:recipient = {
						gold >= 25
					}
					scope:secondary_recipient = {
						time_in_prison = { years > 1 }
					}
					scope:current_gold = yes
				}
			}
		}
		
		modifier = {
			add = ai_greed
			ai_greed > 0
			OR = {
				scope:gold = yes
				scope:extortionate_gold = yes
			}
		}
		
		modifier = {
			add = -100
			has_relation_rival = scope:secondary_recipient
		}
		
		modifier = {
			add = -300
			has_relation_nemesis = scope:secondary_recipient
		}
		
		modifier = {
			add = 100
			scope:favor = yes
			scope:recipient = {
				OR = {
					is_vassal_of = scope:actor
					AND = {
						exists = liege
						liege = scope:actor
					}
				}
			}
		}

		# Struggle Agenda
		modifier = {
			scope:secondary_recipient = {
				any_character_struggle = {
					involvement = involved
				}
			}
			scope:actor = {
				any_character_struggle = {
					involvement = involved
				}
			}
			add = {
				value = 0
				if = {
					limit = {
						scope:actor = {
							any_character_struggle = {
								phase_has_catalyst = catalyst_ransom_important
							}
							has_character_flag = agenda_towards_escalation
						}
					}
					add = -100
				}
				else_if = {
					limit = {
						scope:actor = {
							any_character_struggle = {
								phase_has_catalyst = catalyst_ransom_important
							}
						}
					}
					add = 200
				}
			}
		}
		
		modifier = {
			factor = 0
			is_at_war = yes
		}

		modifier = { # Don't annoy players
			factor = 0
			scope:recipient = { is_ai = no }
			OR = {
				scope:recipient = { is_at_war = yes }
				scope:secondary_recipient = { has_character_flag = character_ransom_refused_by_player }
			}
		}		
	}

	# Needs to be after all other send options so we only default to it if everything else is blocked
	send_option = {
		is_shown = { # When doing the mass ransom, its possible for no option to be valid for the gold costs, so instead of defaulting wrong we explitly fail it
			exists = scope:mass_action
			scope:mass_action = yes
		}
		flag = invalid
		localization = "INVALID"
	}
}